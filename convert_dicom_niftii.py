# -*- coding: utf-8 -*-
"""CONVERT_DICOM_NIFTII.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Gvup08_Xosk0615FnqDIwIX7nv80gH6
"""

pip install pydicom

import os
import pydicom
import numpy as np
import nibabel as nib
import matplotlib.pyplot as plt
from pydicom.dataset import Dataset, FileDataset
from pydicom.uid import UID, generate_uid
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

def dicom_to_nifti(dicom_dir, output_dir):
    # Get list of DICOM files
    dicom_files = [os.path.join(dicom_dir, f) for f in os.listdir(dicom_dir) if f.endswith('.dcm')]

    # Read DICOM metadata from the first file
    ds = pydicom.dcmread(dicom_files[0])
    PixelSpacing = ds.PixelSpacing
    SliceThickness = ds.SliceThickness
    ImagePositionPatient = ds.ImagePositionPatient
    ImageOrientationPatient = ds.ImageOrientationPatient
    SamplesPerPixel = ds.SamplesPerPixel
    PhotometricInterpretation = ds.PhotometricInterpretation
    PixelRepresentation = ds.PixelRepresentation
    BitsStored = ds.BitsStored

    # Sort DICOM files by InstanceNumber to ensure correct order
    dicom_files.sort(key=lambda x: int(pydicom.dcmread(x).InstanceNumber))

    # Read DICOM pixel data and create 3D volume
    dicom_slices = [pydicom.dcmread(f).pixel_array for f in dicom_files]
    volume = np.stack(dicom_slices, axis=-1)

    # Create NIfTI image
    nifti_img = nib.Nifti1Image(volume, np.eye(4))

    # Save NIfTI image
    nifti_output_path = os.path.join(output_dir, 'output.nii.gz')
    nib.save(nifti_img, nifti_output_path)

    print(f"Conversion successful. NIfTI file saved to: {nifti_output_path}")

# Example usage:
dicom_directory = "/content/drive/My Drive/Datasets/Circle_of_Willis"
output_directory = "/content/drive/My Drive/Datasets/nifti"

dicom_to_nifti(dicom_directory, output_directory)

# Load the NIfTI image
nifti_output_path_1 = "/content/drive/My Drive/Datasets/nifti/output.nii.gz"
nifti_img = nib.load(nifti_output_path_1)

# Get the data array from the NIfTI image
data = nifti_img.get_fdata()

# Choose a slice to display (e.g., the middle slice along the z-axis)
slice_index = data.shape[-1] // 2

# Plot the slice
plt.imshow(data[:, :, slice_index], cmap='gray')
plt.axis('off')
plt.title('NIfTI Image')
plt.show()
